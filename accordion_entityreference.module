<?php
//module_load_include('inc', 'accordion_entityreference', 'accordion_entityreference.pages');
/**
 * @file
 * Provides an Accordion formatter for Entity Reference fields.
 */

/**
 * Implements hook_theme().
 */
function accordion_entityreference_theme() {

  $themes = array();

  //Define vars for theme
  $vars = array();
  $vars['items']    = array();
  $vars['settings']  = array();
  $file = 'accordion_entityreference.theme.inc';

  //Define theme
  $themes['accordion']              = array();
  $themes['accordion']['variables'] = $vars;
  $themes['accordion']['template']  = 'theme/accordion';
  $themes['accordion']['file']      = $file;

  //Define vars for theme
  $vars = array();
  $vars['entities']  = NULL;
  $vars['slides']    = array();
  $vars['settings']  = array();
  $vars['accordion'] = array();

  //Define theme
  $themes['accordion_entityreference']                   = array();
  $themes['accordion_entityreference']['variables']      = $vars;
  $themes['accordion_entityreference']['render element'] = 'accordion';
  $themes['accordion_entityreference']['file']           = $file;

  //Define vars for theme
  $vars = array();
  $vars['items']    = array();
  $vars['settings'] = array();

  //Define theme
  $themes['accordion_entitylist']              = array();
  $themes['accordion_entitylist']['variables'] = $vars;
  $themes['accordion_entitylist']['file']      = $file;

  //Define vars for theme
  $vars = array();
  $vars['item']     = array();
  $vars['settings'] = array();
  $vars['caption']  = '';

  //Define theme
  $themes['accordion_list_entity']              = array();
  $themes['accordion_list_entity']['variables'] = $vars;
  $themes['accordion_list_entity']['file']      = $file;

  return $themes;
}

/**
 * Implements hook_field_formatter_info().
 */
function accordion_entityreference_field_formatter_info() {
  return array(
    'entityreference_entity_accordion' => array(
      'label' => t('Accordion'),
      'description' => t('Displays the rendered entities in an Accordion.'),
      'field types' => array('entityreference'),
      'settings' => array(
        'view_mode' => '',
        'header' => '',
        'content' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function accordion_entityreference_field_formatter_settings_form($field,
  $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $field_name = $field['field_name'];
  $parents_array = array($field_name, 'settings_edit_form', 'settings');
  $parents = 'fields]' . implode('][', $parents_array) . ']';

  $form = array();
  $entity_info = entity_get_info($field['settings']['target_type']);
  $options = array();

  if (!empty($entity_info['view modes'])) {
    foreach ($entity_info['view modes'] as $view_mode => $view_mode_settings) {
      $options[$view_mode] = $view_mode_settings['label'];
    }
  }

  if (count($options) > 1) {
    $form['view_mode'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#title' => t('Accordion view mode'),
      '#default_value' => $settings['view_mode'],
    );
    $form['header'] = array(
      '#type' => 'textfield',
      '#title' => t('Header wrapper class'),
      '#default_value' => 'group-header',
      '#default_value' => $settings['header'],
    );
    $form['content'] = array(
      '#type' => 'textfield',
      '#title' => t('Content wrapper class'),
      '#default_value' => $settings['content'],
    );
  }

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function accordion_entityreference_field_formatter_settings_summary($field,
  $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  $entity_info = entity_get_info($field['settings']['target_type']);
  $vars = array();
  $vars['@mode'] = $settings['view_mode'];

  if (isset($entity_info['view modes'][$settings['view_mode']]['label'])) {
    $vars['@mode'] = $entity_info['view modes'][$settings['view_mode']]['label'];
  }

  $summary[] = t('Accordion rendered as @mode', $vars);

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function accordion_entityreference_field_formatter_prepare_view($entity_type,
  $entities, $field, $instances, $langcode, &$items, $displays) {

  // Collect every possible entity attached to any of the entities.
  entityreference_field_formatter_prepare_view($entity_type, $entities, $field,
    $instances, $langcode, $items, $displays);
}

/**
 * Implements hook_field_formatter_view().
 */
function accordion_entityreference_field_formatter_view($parent_entity_type,
  $parent_entity, $field, $instance, $langcode, $items, $display) {

  $result = array();
  $settings = $display['settings'];

  // Rebuild the items list to contain only those with access.
  foreach ($items as $key => $item) {
    if (empty($item['access'])) {
      unset($items[$key]);
    }
  }

  switch ($display['type']) {
    case 'entityreference_entity_accordion':
      foreach ($items as $delta => $item) {
        // Protect ourselves from recursive rendering.
        static $depth = 0;
        $depth++;

        if ($depth > 20) {

          $vars = array();
          $vars['@entity_type'] = $entity_type;
          $vars['@entity_id']   = $item['target_id'];

          $msg = 'Recursive rendering detected when rendering entity ';
          $msg.= '@entity_type(@entity_id). Aborting rendering.';
          throw new EntityReferenceRecursiveRenderingException(t($msg, $vars));
        }

        // Clone the entity to support rendering the same entity in itself.
        $entity = clone $item['entity'];
        unset($entity->content);

        // Provide some context.
        list($parent_id,,$parent_bundle) = entity_extract_ids($parent_entity_type,
        $parent_entity);

        $entity->entityreference_accordion = array(
          'display'     => $display,
          'delta'       => $delta,
          'entity_type' => $parent_entity_type,
          'entity_id'   => $parent_id,
        );

        $entity_id = $item['target_id'];
        $entity_type = $field['settings']['target_type'];
        list(,,$bundle) = entity_extract_ids($entity_type, $entity);

        $entities = array($entity_id => $entity);
        $vm = $settings['view_mode'];
        $build = entity_view($entity_type, $entities, $vm, $langcode, FALSE);

        $result[$delta] = array(
          'element' => array(
            'entity'  => $build[$entity_type][$entity_id],
            'id'      => $entity_id,
            'caption' => entity_label($entity_type, $entity),
            '#entity_info' => array(
              'entity_type' => $entity_type,
              'bundle'      => $bundle,
            ),
          )
        );

        $depth = 0;
      }
      break;
  }

  $element = array();
  if (count($result) > 0) {
    $element = array(
      '#theme' => 'accordion_entityreference',
      '#entities' => $result,
      '#settings' => $display['settings'],
    );
  }
  return $element;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function accordion_entityreference_process_accordion(&$vars) {
  $settings =& $vars['settings'];
}


/**
 * Implements hook_preprocess_HOOK().
 */
function accordion_entityreference_preprocess_accordion_list(&$vars) {
  $vars['theme_hook_suggestions'][] = 'accordion_list';
  $vars['theme_hook_suggestions'][] = 'accordion_entitylist';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @see template_process_accordion_list_item().
 */
function accordion_entityreference_preprocess_accordion_list_item(&$vars) {
  if (is_array($vars['item']) && isset($vars['item']['entity'])) {

    $entity_type = $vars['item']['#entity_info']['entity_type'];
    $bundle      = $vars['item']['#entity_info']['bundle'];

    $suggestion  = array();
    $suggestion[]= 'accordion_list_item';
    $suggestion[]= 'accordion_list_entity';
    $suggestion[]= 'accordion_list_entity__' . $entity_type;
    $suggestion[]= 'accordion_list_entity__' . $entity_type . '__' . $bundle;

    $vars['theme_hook_suggestions'][] = $suggestion[0];
    $vars['theme_hook_suggestions'][] = $suggestion[1];
    $vars['theme_hook_suggestions'][] = $suggestion[2];
    $vars['theme_hook_suggestions'][] = $suggestion[3];
  }
}

/*
 * This function loads the required JavaScripts and settings for a accordion
 * instance.
 *
 * @param string $id [optional]
 *  ID Attribute for Accordion container
 *
 */
function accordion_add($id = NULL, $header_class = 'group-header', $content_class = 'group-inner-section') {

  // Add library accordion
  drupal_add_library('system', 'ui.accordion');

  //If not empty id
  if (!empty($id)) {

    // JavaScript settings
    $js_settings = array(
      'accordion_id'     => $id,
      'accordion_header' => '.' . $header_class,
      'accordion_content' => '.' . $content_class,
    );

    // Add settings js
    drupal_add_js(array('accordion_entityreference' => $js_settings), 'setting');
  }

  // Loader JavaScript
  $options = array();
  $options['type']  = 'file';
  $options['scope'] = 'footer';
  $path = drupal_get_path('module', 'accordion_entityreference');
  drupal_add_js($path. '/js/accordion_entityreference.js', $options);
}
